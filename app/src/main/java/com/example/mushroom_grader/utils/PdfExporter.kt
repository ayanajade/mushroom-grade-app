package com.example.mushroom_grader.utils

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Environment
import com.example.mushroom_grader.ml.ClassificationResult
import com.itextpdf.io.image.ImageDataFactory
import com.itextpdf.kernel.colors.ColorConstants
import com.itextpdf.kernel.colors.DeviceRgb
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.layout.Document
import com.itextpdf.layout.element.Image
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.layout.element.Table
import com.itextpdf.layout.properties.TextAlignment
import com.itextpdf.layout.properties.UnitValue
import java.io.ByteArrayOutputStream
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

class PdfExporter(private val context: Context) {

    companion object {
        private const val PDF_QUALITY = 80
    }

    fun exportResultToPdf(
        result: ClassificationResult,
        imagePath: String?,
        mushroomInfo: String
    ): File? {
        return try {
            val pdfFile = createPdfFile()
            val writer = PdfWriter(pdfFile)
            val pdfDoc = PdfDocument(writer)
            val document = Document(pdfDoc)

            addTitle(document)

            imagePath?.let {
                addImage(document, it)
            }

            addClassificationDetails(document, result)
            addMushroomInfo(document, mushroomInfo)

            if (result.isPoisonous) {
                addSafetyWarning(document)
            }

            addFooter(document)
            document.close()

            pdfFile

        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    private fun createPdfFile(): File {
        val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(Date())
        val fileName = "MushroomGrader_Report_$timestamp.pdf"

        val directory = File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
            "MushroomGrader"
        )

        if (!directory.exists()) {
            directory.mkdirs()
        }

        return File(directory, fileName)
    }

    private fun addTitle(document: Document) {
        val title = Paragraph("Mushroom Classification Report")
            .setFontSize(24f)
            .setBold()
            .setTextAlignment(TextAlignment.CENTER)
            .setMarginBottom(20f)

        document.add(title)

        val subtitle = Paragraph("Generated by Mushroom Grader App")
            .setFontSize(12f)
            .setTextAlignment(TextAlignment.CENTER)
            .setMarginBottom(10f)
            .setFontColor(ColorConstants.GRAY)

        document.add(subtitle)

        val date = SimpleDateFormat("MMMM dd, yyyy 'at' hh:mm a", Locale.US).format(Date())
        val dateText = Paragraph(date)
            .setFontSize(10f)
            .setTextAlignment(TextAlignment.CENTER)
            .setMarginBottom(30f)
            .setFontColor(ColorConstants.GRAY)

        document.add(dateText)
    }

    private fun addImage(document: Document, imagePath: String) {
        try {
            val bitmap = BitmapFactory.decodeFile(imagePath)
            val stream = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.JPEG, PDF_QUALITY, stream)
            val imageData = ImageDataFactory.create(stream.toByteArray())

            val image = Image(imageData)
                .setWidth(UnitValue.createPercentValue(60f))
                .setHorizontalAlignment(com.itextpdf.layout.properties.HorizontalAlignment.CENTER)
                .setMarginBottom(20f)

            document.add(image)
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    private fun addClassificationDetails(document: Document, result: ClassificationResult) {
        val heading = Paragraph("Classification Details")
            .setFontSize(16f)
            .setBold()
            .setMarginBottom(10f)

        document.add(heading)

        val table = Table(2)
            .setWidth(UnitValue.createPercentValue(100f))
            .setMarginBottom(20f)

        addTableRow(table, "Mushroom Species:", result.className)
        addTableRow(table, "Confidence:", result.getConfidencePercentage())
        addTableRow(table, "Category:", result.category.name)

        result.grade?.let {
            addTableRow(table, "Quality Grade:", it)
        }

        val safetyStatus = if (result.isPoisonous) "⚠️ POISONOUS" else "✓ SAFE"
        val safetyColor = if (result.isPoisonous)
            DeviceRgb(220, 53, 69) else DeviceRgb(40, 167, 69)

        addTableRow(table, "Safety Status:", safetyStatus, safetyColor)

        document.add(table)
    }

    private fun addTableRow(
        table: Table,
        label: String,
        value: String,
        valueColor: DeviceRgb? = null
    ) {
        val labelPara = Paragraph(label)
            .setBold()
            .setFontSize(11f)

        val valuePara = Paragraph(value)
            .setFontSize(11f)

        valueColor?.let {
            valuePara.setFontColor(it)
        }

        table.addCell(labelPara)
        table.addCell(valuePara)
    }

    private fun addMushroomInfo(document: Document, info: String) {
        val heading = Paragraph("Detailed Information")
            .setFontSize(16f)
            .setBold()
            .setMarginBottom(10f)

        document.add(heading)

        val infoPara = Paragraph(info)
            .setFontSize(10f)
            .setMarginBottom(20f)

        document.add(infoPara)
    }

    private fun addSafetyWarning(document: Document) {
        val warning = Paragraph("⚠️ SAFETY WARNING")
            .setFontSize(14f)
            .setBold()
            .setFontColor(DeviceRgb(220, 53, 69))
            .setBackgroundColor(DeviceRgb(255, 243, 205))
            .setPadding(10f)
            .setMarginBottom(10f)

        document.add(warning)

        val warningText = Paragraph(
            "This mushroom has been identified as POISONOUS. " +
                    "DO NOT CONSUME under any circumstances. " +
                    "If accidentally ingested, seek immediate medical attention."
        )
            .setFontSize(10f)
            .setMarginBottom(20f)

        document.add(warningText)
    }

    private fun addFooter(document: Document) {
        val disclaimer = Paragraph(
            "DISCLAIMER: This report is generated by an AI model for educational purposes. " +
                    "Always consult with mycology experts before consuming any wild mushrooms. " +
                    "The developers assume no liability for the use of this information."
        )
            .setFontSize(8f)
            .setTextAlignment(TextAlignment.CENTER)
            .setFontColor(ColorConstants.GRAY)
            .setMarginTop(30f)

        document.add(disclaimer)

        val footer = Paragraph(
            "Mushroom Grader © 2025-2026 | WMSU College of Computing Studies"
        )
            .setFontSize(8f)
            .setTextAlignment(TextAlignment.CENTER)
            .setFontColor(ColorConstants.GRAY)
            .setMarginTop(5f)

        document.add(footer)
    }
}
